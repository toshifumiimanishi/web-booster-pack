(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{325:function(t,e,r){"use strict";r.r(e);var n=r(33),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"overview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),r("h2",{attrs:{id:"breakpoints-design"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#breakpoints-design"}},[t._v("#")]),t._v(" Breakpoints design")]),t._v(" "),r("p",[t._v("CSS のメディアクエリは、レスポンシブ Web デザインを利用したデバイスに合わせたデザインを作ることができます。当ボイラープレートは標準でブレークポイントを用意しています。ブレークポイントの設定は自由に編集できます。具体的には "),r("code",[t._v("_variables.scss")]),t._v(" の "),r("code",[t._v("$breakpoints")]),t._v(" マップを変更してください。デフォルトのブレークポイントは以下の通りです。")]),t._v(" "),r("div",{staticClass:"language-scss extra-class"},[r("pre",{pre:!0,attrs:{class:"language-scss"}},[r("code",[r("span",{pre:!0,attrs:{class:"token property"}},[r("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$breakpoints")])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token property"}},[t._v("sm")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token property"}},[t._v("md")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 768px"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token property"}},[t._v("lg")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1280px"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token statement keyword"}},[t._v("!default")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[t._v("また、ブレークポイントでスタイルを切り替えるメディアクエリの指定は "),r("a",{attrs:{href:"https://sass-lang.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sass"),r("OutboundLink")],1),t._v(" の "),r("code",[t._v("@mixin")]),t._v(" 経由で利用できます。たとえば、md（768px）以上の画面サイズに適用したいスタイルを指定するには次のようになります。")]),t._v(" "),r("div",{staticClass:"language-scss extra-class"},[r("pre",{pre:!0,attrs:{class:"language-scss"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@include")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("breakpoint-min")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("md"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ... "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("なお、当ブレークポイントの設計は CSS フレームワークの "),r("a",{attrs:{href:"https://getbootstrap.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bootstrap"),r("OutboundLink")],1),t._v(" を参考にしています。")]),t._v(" "),r("h2",{attrs:{id:"eslint-と-prettier-の併用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eslint-と-prettier-の併用"}},[t._v("#")]),t._v(" ESLint と Prettier の併用")]),t._v(" "),r("p",[t._v("まずはじめに ESLint と Prettier は役割が異なります。"),r("a",{attrs:{href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint"),r("OutboundLink")],1),t._v(" は JavaScript のための静的検証ツールであり、"),r("a",{attrs:{href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prettier"),r("OutboundLink")],1),t._v(" はコードフォーマッターです。 "),r("strong",[t._v("昨今のフロントエンド開発では両者を併せて利用することを推奨されています。")]),t._v(" 実は ESLint にもコード整形機能が備わっているのですが、「餅は餅屋」という言葉があるようにコードフォーマッターである Prettier にコード整形を一任させることでより優れたコード整形を実現できます。")]),t._v(" "),r("p",[t._v("ESLint と Prettier を併用するには、"),r("a",{attrs:{href:"https://github.com/prettier/eslint-config-prettier",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("eslint-config-prettier")]),r("OutboundLink")],1),t._v(" と "),r("a",{attrs:{href:"https://github.com/prettier/eslint-plugin-prettier",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("eslint-plugin-prettier")]),r("OutboundLink")],1),t._v(" を利用します。")]),t._v(" "),r("ul",[r("li",[t._v("eslint-config-prettier： Prettier と競合するルールを無効にするためのプラグイン")]),t._v(" "),r("li",[t._v("eslint-plugin-prettier： Prettier 経由でコードを整形するためのルールを追加するプラグイン")])]),t._v(" "),r("p",[t._v("ESLint 以外にも TSLint や Stylelint のようなリンターと併用するための方法は "),r("a",{attrs:{href:"https://prettier.io/docs/en/integrating-with-linters.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prettier の公式ドキュメント"),r("OutboundLink")],1),t._v("に記載されています。")]),t._v(" "),r("p",[t._v("ちなみに、当テンプレートの TypeScript のリンターは TSLint ではなく ESLint を利用します。理由は TSLint 開発チームが ESLint のプラグインとして TSLint の機能を統合していく "),r("a",{attrs:{href:"https://github.com/typescript-eslint/typescript-eslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("typescript-eslint"),r("OutboundLink")],1),t._v(" プロジェクトを開始し、TSLint は非推奨となりました。")])])}),[],!1,null,null,null);e.default=s.exports}}]);